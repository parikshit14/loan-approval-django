# -*- coding: utf-8 -*-
"""loan_approvals.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bKOQcgAd6_2l3-1ofOaFGVH-qLJA4pKH
"""

import pandas as pd
import numpy as np
#import seaborn as sns
from sklearn import model_selection

from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score,confusion_matrix,roc_auc_score

from sklearn import pipeline,preprocessing,metrics,model_selection,ensemble
from sklearn_pandas import DataFrameMapper
from sklearn.impute import SimpleImputer

train=pd.read_csv('C:/Users/Parikshit/loan_data_model/train.csv')
train.rename(columns={'number_of_owner-occupied_units':'number_of_owner_occupied_units'},inplace=True)
test=pd.read_csv('C:/Users/Parikshit/loan_data_model/test.csv')
test.rename(columns={'number_of_owner-occupied_units':'number_of_owner_occupied_units'},inplace=True)
test.info()
train.info()

"""analysis"""

train.isnull().sum()

"""so there are these many missing values in the dataset"""

test.isnull().sum()

test.drop(['row_id'],axis=1,inplace=True)
train.drop(['row_id'],axis=1,inplace=True)

mapper = DataFrameMapper([
                        (['loan_type','property_type', 'loan_purpose', 'occupancy' , 'loan_amount' , 'preapproval','msa_md','state_code','county_code', 'applicant_ethnicity','applicant_sex','lender','co_applicant'], preprocessing.StandardScaler()),
                        (['applicant_income', 'population' , 'minority_population_pct' ,'ffiecmedian_family_income'  , 'tract_to_msa_md_income_pct'  , 'number_of_owner_occupied_units'  , 'number_of_1_to_4_family_units','applicant_race'],SimpleImputer(missing_values=np.nan, strategy='mean')),
                        #(['applicant_race'], preprocessing.OneHotEncoder())
                        ])

pipeline_obj = pipeline.Pipeline([
    ('mapper',mapper),
    ("model", DecisionTreeClassifier())
])

test=test.dropna(axis=0)

#training dataset
y=train['accepted']
x=train.drop('accepted',axis=1)
x.head()

x_train,x_validation,y_train,y_validation=train_test_split(x,y,test_size=0.2)
#pipeline_dtc=Pipeline([('scalar2',StandardScaler()),
 #                    ('pca2',PCA(n_components=2)),
  #                   ('dt_classifier',DecisionTreeClassifier())])

pipeline_obj.fit(x_train,y_train)

pre=pipeline_obj.predict(x_validation)

pre

#pre1=clf.predict(x_validation)
#acc1=accuracy_score(pre1,y_validation)
#print(acc1)
#pre2=DTC.predict(x_validation)
acc2=accuracy_score(pre,y_validation)
print(acc2)
#pre3=knn.predict(x_validation)
#acc3=accuracy_score(pre3,y_validation)
#print(acc3)

import joblib

joblib.dump(pipeline_obj,'loan_approvals.pkl')

modelreload=joblib.load('loan_approvals.pkl')

modelreload.predict(test)

temp={}
temp['loan_type']=2
temp['property_type']=1
temp['loan_purpose']=3
temp['occupancy']=1
temp['loan_amount']=113
temp['preapproval']=3
temp['msa_md']=356
temp['state_code']=5
temp['county_code']=98
temp['applicant_ethnicity']=3
temp['applicant_race']=5
temp['applicant_sex']=1
temp['applicant_income']=471
temp['population']=3256
temp['minority_population_pct']=24.824
temp['ffiecmedian_family_income']=52771.0
temp['tract_to_msa_md_income_pct']=100.000
temp['number_of_owner_occupied_units']=800.0
temp['number_of_1_to_4_family_units']=1013.0
temp['lender']=5684
temp['co_applicant']=True

testData=pd.DataFrame({'x':temp}).transpose()

print(modelreload.predict(testData)[0])


